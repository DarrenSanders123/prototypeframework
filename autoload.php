<?php
/** @noinspection PhpUnhandledExceptionInspection
 * @noinspection PhpMissingParamTypeInspection
 * @noinspection ClassConstantCanBeUsedInspection
 */
/* -- CONFIG START HERE --
{
    "rooturl": ".",
    "fileGen": ".",
    "savefile": "1",
    "compression": "1",
    "savefileName": "autoload.php",
    "excludeNS": "",
    "excludePath": "/vendor*",
    "externalPath": ""
}
-- CONFIG END HERE -- */

/**
 * This class is used for autocomplete.
 * Class _AUTOLOAD_
 * @noautoload it avoids to index this class
 * @generated by AutoLoadOne 1.26 generated 2022/05/11 11:47:11
 * @copyright Copyright Jorge Castro C - MIT License. https://github.com/EFTEC/AutoLoadOne
 */
/** @var bool $autoloadone__debug if true then in case of error, it shows more information about the source of it  */ 
$autoloadone__debug = true;

/* @var string[] Where $_arrautoloadCustom['namespace\Class']='folder\file.php' */
$s627ba23fabc6a__arrautoloadCustom = [
	'DS\UrlFormatter' => '/app/classes/router/UrlFormatter.php'
];
$s627ba23fabc6a__arrautoloadCustomCommon = [

];

/* @var string[] Where $_arrautoload['namespace']='folder' */
$s627ba23fabc6a__arrautoload = [
	'DS' => '.'
];
$s627ba23fabc6a__arrautoloadCommon = [

];

/* @var boolean[] Where $_arrautoload['namespace' or 'namespace\Class']=true if it's absolute (it uses the full path) */
$s627ba23fabc6a__arrautoloadAbsolute = [
 
];

/**
 * @param $class_name
 * @throws Exception
 */
function s627ba23fabc6a__auto($class_name)
{
    // its called only if the class is not loaded.
    set_exception_handler('autoloadone_exception_handler');
    $p=strrpos($class_name,'\\');
    if($p!==false) {
        $ns=substr($class_name,0,$p);
        $cls=substr($class_name,$p+1);
    } else {
        $ns='';
        $cls=$class_name;
    }
    // special cases
    if (isset($GLOBALS['s627ba23fabc6a__arrautoloadCustom'][$class_name])) {
        s627ba23fabc6a__loadIfExists($class_name,$GLOBALS['s627ba23fabc6a__arrautoloadCustom'][$class_name]
            , $class_name,'s627ba23fabc6a__arrautoloadCustomCommon');
        restore_exception_handler();
        return;
    }
    // normal (folder) cases
    if (isset($GLOBALS['s627ba23fabc6a__arrautoload'][$ns])) {
        s627ba23fabc6a__loadIfExists($class_name,$GLOBALS['s627ba23fabc6a__arrautoload'][$ns] . '/' . $cls . '.php'
            , $ns,'s627ba23fabc6a__arrautoloadCommon');
        restore_exception_handler();
        return;
    }
    if(!class_exists($class_name)) {
        throw new RuntimeException("AutoLoadOne Error: No file found for class [$class_name]");
    }
    restore_exception_handler();    
}

/**
 * We load the file.    
 * @param string $className the name of the class
 * @param string $filename the filename to load
 * @param string $key key of the class it could be the full class name or only the namespace
 * @param string $arrayName [optional] it's the name of the arrayname used to replaced |n| values. 
 * @throws Exception
 */
function s627ba23fabc6a__loadIfExists($className,$filename, $key,$arrayName='')
{
    if (isset($GLOBALS['s627ba23fabc6a__arrautoloadAbsolute'][$key])) {
        $fullFile = $filename; // its an absolute path
        if (strpos($fullFile, '../') === 0) { // Or maybe, not, it's a remote-relative path.
            $oldDir = getcwd();  // we copy the current url
            chdir(__DIR__);
        }
    } else {
        $fullFile = __DIR__ . '/' . s627ba23fabc6a__replaceCurlyVariable($filename, $arrayName); // its relative to this path
    }
    /** @noinspection PhpIncludeInspection */
    if ((@include $fullFile) === false) {
        if ($GLOBALS['autoloadone__debug']) {
            throw new RuntimeException("AutoLoadOne Error: Loading file [$fullFile] for class [$className]");
        }
        throw new RuntimeException("AutoLoadOne Error: No file found for class [$className]");
    }
    if (isset($oldDir)) {
        chdir($oldDir);
    }
} 
function s627ba23fabc6a__replaceCurlyVariable($string,$arrayName) {
    if(strpos($string,'|')===false) {
        return $string;
    } // nothing to replace.
    return preg_replace_callback('/\\|\s?(\w+)\s?\\|/u', static function ($matches) use ($arrayName) {
        $item = is_array($matches) ? substr($matches[0], 1, -1)
            : substr($matches, 1, -1);
        return $GLOBALS[$arrayName][$item];
    }, $string);
}
function autoloadone_exception_handler($exception) {
    $isCli=!http_response_code();
    $r="Uncaught Exception: [".get_class($exception)."] code:".$exception->getCode()."\n".$exception->getMessage()."\n";
    if ($GLOBALS['autoloadone__debug']) {
        $r .= "Trace:\n";
        foreach ($exception->getTrace() as $error) {
            // we remove all trace pointing to this file.
            if (isset($error['file'])) {
                if(strpos($error['file'], __FILE__) === false) {
                    $r .= @$error['file'] . '[' . @$error['line'] . ']' . ' function:' . @$error['function'] . '('
                        .( is_array(@$error['args']) ? @implode(',', @$error['args']) . ')' :@$error['args'])
                        . "\n";
                } else {
                    $r .= '(nofile)' . '[' . @$error['line'] . ']' . ' function:' . @$error['function'] . '('
                        .( is_array(@$error['args']) ? @implode(',', @$error['args']) . ')' :@$error['args'])
                        . "\n";                
                }
            }
        }
    }
    if(!$isCli) {
        $r=str_replace(["\n",'[',']'],["<br>","<b>[","]</b>"],$r);
    }
    echo $r;
    die(1);
}



spl_autoload_register(static function ($class_name) {
    s627ba23fabc6a__auto($class_name);
});
// Autorun: this file was created using _AUTOLOAD_COMPOSERJSON=false so autorun is disabled

